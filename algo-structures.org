* Create mental map of algorithms and data structures
** Array Vs ArrayList Vs Linked List
*** Fixed size vs variable size
*** Algorithms can use two pointer approach in both - you can get O(n) instead of two loops
**** Example - Remove duplicates
*** LinkedList can use dual pointer approach
*** Is Unique chars - use array of 128 elements, to store duplicate or not
** Array Algorithms
*** Search
*** Sort
**** O(NLogN) - Quick Sort or Quick Select
***** Choose a pivot and split the array to sort or search - (Wrong pivot worst case O(n^2)
***** kth smallest element - partition left or right, if position = k, return array element
** Stack
*** FIFO, 
*** Implementation - push, pop, peek
*** Recursion can be replaced by iteration with stacks
*** Multiple stacks, Stack with min
*** Stack with plates
*** Queue via stacks
**** One stack to add element to queue 
**** One stack to pop element
**** Before remove or peek, shiftStacks, move from new to old stack
*** Sort (merge sort)
**** three stack - left, right, reverse
**** Compare left and right, push into new stack, at the end, reverse the stack by popping and inserting into reverse stack
** 
** Queue
*** Two ends
*** Push, pop (poll), remove
*** Used in Breadth First search
** Trees
*** Binary tree
**** Two nodes
**** Traversal, inorder, preorder, post order O(N) - 
**** Insert, Select takes O(logN)
**** First Common Ancestor
***** Two nodes P and Q, for P and every ancestor of P, check q or q ancestors match
***** If match return true
*** Binary Search Tree
**** Left nodes are less than root and right nodes greater that root
**** Inorder traversal gives sorted array in descending order
**** Full tree, complete tree
**** Sometimes better than hash table - range queries, O(logN) for all operations
**** Create minimal BST from sorted array
***** Recursively set left child for elements from start to mid-1
***** Recursively set right child for elements from mid+1 to end
***** Middle element becomes root 
***** Treenode structure (data, left, right, parent)
**** Is Balanced
***** recursively check the left and right height
***** return max(left height, right height) + 1
***** If diff(left height - right height) > 1 - return false
**** Validate BST
***** Recursively check (if root.data < left.data) , if right (root.data <= lastPrinted)
** Graphs
*** Directed
*** Undirected
*** Cycles - When there is a back edge - find by using DFS (if you revisit marked node)
*** Representation 
**** Adjacency List - ArrayList to store the next vertex
**** Matrix - Issue with sparse matrix
**** Shortest path algorithms
*** Traversal
**** BFS (path between nodes) - Add start element to queue and mark as visiting
***** Remove first element from queue and get all adjacent
***** If adjacent element is not visited, mark as visiting and add to queue
***** After visiting all the adjacent elements, mark the current element as visited
***** If 
** Trie
*** To find prefix
*** Use hashtable in everynode to store the next set of characters, special character to denote end of word
*** Takes O(s) - string length to get the prefix
** Heaps
*** Stores min or max element at the top
*** Add / remove takes O(LogN)
** HashTabe
*** O(1) - constant time for add, delete, search
*** No sort option like tree
** LinkedList
*** Remove dups using two pointers
*** Return kth to last
*** Loop detection - two pointers, 
**** Slow and fast (fast at double the speed of slow)
**** Break when slow = fast
**** Start slow at head (fast at meeting point) and move one step, both will meet at loop 
* How to approach problem to create solution
** Two Loops
*** Use hashtable to count or find duplicates
**** Longest substring without duplicates
***** Save character and position in hashtable,
***** if character exists, position - last time we have duplicate - longest substring
*** Two pointer approach
*** Remove duplicates (in place removal)
*** Sum of elements (two sum, three sum equal to target)
**** Improvement - use backtracking
** Use recursion to get a simple solution
*** two paths - robot movement from top to bottom (with only 2 moves allowed up or down)
** Use backtracking for performance improvements (removes unused path)
*** Permutation - ?
** Improve solution by adding memoization (dynamic programming)
*** Palindrome with a matrix
**** Save one character palindrome in a array, 2 character and more than 2 in seperate loops
**** 
** Improve by using iteration (bottom up approach), improves space and speed
** 
* Recursion
** Towers of Hanoi
*** movedisks (quantity, destination, buffer)
**** movedisks(quantity-1,buffer, destination)
**** moveTopTo(destination)
***** pop (Tower is a stack)
***** add popped disk to destination
**** buffer.moveDisks(quantity-1, destination, source)
** Permutation (string)
*** loop through from 0 to n-1
*** take each character, and loop through remaining characters with recursion
*** exit clause (length of remainig characters in each recursion)
*** Add n-character permutation to result array
** Permuation with dups - remove dups by using a HashMap
** Paranthesis
*** Exit clause - remaining left = 0 or rightRemaining less than left remaining
*** when left index and right index are zero, add string to result
*** set str[indx] ='(' and recurse left -1
*** set str[indx] =')' and recurse right -1
** Coin change - how many ways sum coins to total
*** Exit clause - last coin, return 1 if equals to zero after adding last coin or return 0
*** Try 1 coin (recurse for remaining amount), same with 2,3 etc - 
**** if you choose 2nd coin do we check the first coin (denom) ? - no need we already check the first denom with remaining
*** Save temp results using matrix
*** Return mat[total][index], save if not present

